// Helper functions
function randomString(length) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

function randomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Create 5 purveyors
const purveyorNames = [
  `Supplier_${randomString(5)}`,
  `Vendor_${randomString(5)}`,
  `Market_${randomString(5)}`,
  `Farm_${randomString(5)}`,
  `Distributor_${randomString(5)}`
];
try {
  const purveyorResult = db.purveyors.insertMany(purveyorNames.map(name => ({ name })));
  print('Inserted 5 purveyors:', purveyorNames);
} catch (err) {
  print('Error inserting purveyors:', err.message);
}

// Get purveyor IDs
const purveyorIds = db.purveyors.find().toArray().map(p => p._id);
if (purveyorIds.length !== 5) {
  print('Error: Expected 5 purveyors, found:', purveyorIds.length);
  throw new Error('Purveyor insertion failed');
}

// Create 30 ingredients
const ingredientNames = [
  'Flour', 'Sugar', 'Butter', 'Eggs', 'Milk', 'Salt', 'Pepper', 'Olive Oil', 'Garlic', 'Onion',
  'Tomato', 'Basil', 'Chicken', 'Beef', 'Pork', 'Rice', 'Pasta', 'Cheese', 'Cream', 'Spinach',
  'Carrot', 'Potato', 'Lemon', 'Vinegar', 'Honey', 'Soy Sauce', 'Ginger', 'Parsley', 'Cinnamon', 'Nutmeg'
];
try {
  const ingredientResult = db.ingredients.insertMany(
    ingredientNames.map(name => ({
      name,
      purveyor: purveyorIds[randomInt(0, purveyorIds.length - 1)]
    }))
  );
  print('Inserted 30 ingredients:', ingredientNames);
} catch (err) {
  print('Error inserting ingredients:', err.message);
}

// Get ingredient IDs
const ingredientIds = db.ingredients.find().toArray().map(i => i._id);
if (ingredientIds.length !== 30) {
  print('Error: Expected 30 ingredients, found:', ingredientIds.length);
  throw new Error('Ingredient insertion failed');
}

// Measurement units
const measures = ['tsp', 'tbsp', 'cup', 'oz', 'fl oz', 'lb', 'g', 'kg', 'ml', 'l', 'pinch', 'dash', 'each', 'slice', 'whole'];

// Create 20 recipes
const recipes = [];
for (let i = 0; i < 20; i++) {
  const numIngredients = randomInt(2, 5);
  const recipeIngredients = [];
  const usedIngredientIds = new Set();

  while (recipeIngredients.length < numIngredients) {
    const ingId = ingredientIds[randomInt(0, ingredientIds.length - 1)];
    if (!usedIngredientIds.has(ingId.toString())) {
      const ingredient = db.ingredients.findOne({ _id: ingId });
      recipeIngredients.push({
        ingredient: ingId,
        quantity: randomInt(1, 10).toString(),
        measure: measures[randomInt(0, measures.length - 1)],
        purveyor: ingredient.purveyor
      });
      usedIngredientIds.add(ingId.toString());
    }
  }

  recipes.push({
    name: `Recipe_${randomString(5)}`,
    ingredients: recipeIngredients,
    steps: `Step 1: Mix ingredients.\nStep 2: Cook at ${randomInt(350, 450)}Â°F for ${randomInt(20, 60)} minutes.\nStep 3: Serve hot.`,
    platingGuide: `Arrange on plate with garnish.\nSprinkle with ${ingredientNames[randomInt(0, ingredientNames.length - 1)]}.`,
    allergens: ['Gluten', 'Dairy', 'Eggs', 'Nuts', 'Soy'].slice(0, randomInt(0, 3)),
    serviceTypes: ['Breakfast', 'Lunch', 'Dinner', 'Snack'].slice(0, randomInt(1, 3)),
    image: null,
    active: true,
    createdAt: new Date(),
    updatedAt: new Date()
  });
}
try {
  const recipeResult = db.recipes.insertMany(recipes);
  print('Inserted 20 recipes with random ingredients');
} catch (err) {
  print('Error inserting recipes:', err.message);
}

// Verify data
print('Purveyors count:', db.purveyors.countDocuments());
print('Ingredients count:', db.ingredients.countDocuments());
print('Recipes count:', db.recipes.countDocuments());