# Production Docker Compose Configuration for Restaurant Recipe App
# Optimized for DigitalOcean droplet deployment

version: '3.8'

services:
  # Volume initialization for uploads directory
  init-backend:
    image: node:20-alpine
    user: "0:0"
    command: >
      sh -c "
      mkdir -p /app/uploads &&
      chown -R 1001:1001 /app/uploads &&
      chmod 755 /app/uploads &&
      echo 'Uploads volume permissions set (nodejs:nodejs, dir 755)' &&
      ls -la /app/uploads
      "
    volumes:
      - uploads:/app/uploads
    networks:
      - recipe-app-network

  mongo-container:
    image: mongo:latest
    restart: unless-stopped
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - recipe-app-network
    environment:
      - MONGO_INITDB_DATABASE=recipeDB
    # Production: Don't expose MongoDB port externally
    expose:
      - "27017"

  backend-container:
    build:
      context: ../../..
      dockerfile: deployment/docker/production/backend.Dockerfile
    restart: unless-stopped
    depends_on:
      mongo-container:
        condition: service_healthy
      init-backend:
        condition: service_completed_successfully
    env_file:
      - env.production
    volumes:
      - uploads:/app/uploads
    networks:
      - recipe-app-network
    # Production: Don't expose backend port externally (use reverse proxy)
    expose:
      - "8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend-container:
    build:
      context: ../../..
      dockerfile: deployment/docker/production/frontend.Dockerfile
      args:
        - REACT_APP_API_URL=https://167.71.247.15/api
        - REACT_APP_ENVIRONMENT=production
    restart: unless-stopped
    depends_on:
      - backend-container
    networks:
      - recipe-app-network
    # Production: Don't expose frontend port externally (use reverse proxy)
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Production: Add Nginx reverse proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend-container
      - frontend-container
    networks:
      - recipe-app-network

  # Monitoring Services for Production
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../../../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../../../monitoring/prometheus-web.yml:/etc/prometheus/web.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
      - '--web.config.file=/etc/prometheus/web.yml'
    networks:
      - recipe-app-network
    depends_on:
      - backend-container

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ../../../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../../../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - recipe-app-network
    depends_on:
      - prometheus

networks:
  recipe-app-network:
    driver: bridge

volumes:
  mongo-data:
  uploads:
  prometheus-data:
  grafana-data:
